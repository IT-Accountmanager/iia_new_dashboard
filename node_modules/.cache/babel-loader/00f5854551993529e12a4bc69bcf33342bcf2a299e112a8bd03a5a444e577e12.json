{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akhil.t.EIS\\\\Videos\\\\IIA_Final\\\\IIA_DASHBOARDS\\\\src\\\\Component\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link, useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { CloudUpload, CloudDownload, CheckCircleOutline, RemoveRedEye, Edit } from '@mui/icons-material';\nimport { Card, CardHeader, CardContent, CardActions, Button, Checkbox, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TablePagination, TextField, IconButton } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\n  const [loading, setLoading] = useState(true); // State to manage loading status\n  const [error, setError] = useState(null); // State for error handling\n  const [name, setName] = useState('');\n  const [isSecondModalOpen, setIsSecondModalOpen] = useState(false); // Second modal state\n  const [user, setUser] = useState('');\n  const location = useLocation();\n  const [filter, setFilter] = useState('');\n  const [datasource, setDatasource] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [directoryNavId, setDirectoryNavId] = useState(null);\n  const navigate = useNavigate();\n  const {\n    navId: routeNavId\n  } = useParams(); // Get navId from route parameters\n  const [navId, setNavId] = useState(() => routeNavId ? Number(routeNavId) : undefined); // Initialize navId with routeNavId\n  const [isSelected, setIsSelected] = useState(false);\n  useEffect(() => {\n    // Update navId whenever routeNavId changes\n    if (routeNavId) {\n      setNavId(Number(routeNavId));\n    }\n  }, [routeNavId]); // Runs when routeNavId changes\n\n  const handleClick = navId => {\n    console.log(navId);\n\n    // Prevent the default link behavior\n    // history.push('/onboarding'); // Redirect to the OnBoarding page\n    navigate('/onboarding/${directoryNavId}');\n  };\n  useEffect(() => {\n    // Retrieve the DIRECTORY navId from localStorage when the page loads\n    const storedNavId = localStorage.getItem('directoryNavId');\n    if (storedNavId) {\n      console.log('Retrieved DIRECTORY navId:', storedNavId);\n      setDirectoryNavId(storedNavId);\n    }\n  }, []);\n  useEffect(() => {\n    const fetchSubNavData = async () => {\n      if (!navId) {\n        console.error('navId is not set');\n        setLoading(false);\n        return; // Exit if navId is not defined\n      }\n      try {\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\n        console.log(\"Response status:\", response.status); // Log response status\n\n        if (!response.ok) {\n          console.error('Response not OK:', response);\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\n        }\n        const data = await response.json();\n        console.log('Fetched sub-navigation data:', data); // Log fetched data for debugging\n\n        // Check if the response structure is as expected\n        if (Array.isArray(data)) {\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\n        } else if (data) {\n          setSubNavData([data]); // If it's a single object, wrap it in an array\n        } else {\n          console.log('No valid data returned from API');\n          setSubNavData([]); // Reset state if no valid data\n        }\n      } catch (error) {\n        console.error('Error fetching sub-navigation data:', error);\n        setError(error.message); // Set error message to state\n      } finally {\n        setLoading(false); // Stop loading regardless of success or failure\n      }\n    };\n    fetchSubNavData(); // Call the fetch function whenever navId changes\n  }, [navId]); // Fetch data whenever navId changes\n\n  // Define a mapping between subNav names and routes\n  // useEffect(() => {\n  //   // Fetch your subNavData (dynamic data)\n  //   // Example fetch call:\n  //   setSubNavData([\n  //     { subNavId: 1, name: \"OnBoarding\" },\n  //     { subNavId: 2, name: \"Profile\" },\n  //     { subNavId: 3, name: \"Hr Executive\" },\n  //     { subNavId: 4, name: \"Hr Manager\" }, // Ensure this matches\n  //     { subNavId: 5, name: \"Summary\" }, // Ensure this matches \n\n  //     // Add more dynamic data if necessary\n  //   ]);\n  // }, []);\n\n  // const handleClick = () => {\n  //   // Your click logic here\n  //   console.log(\"Item clicked\");\n  // };\n\n  const handleFilterChange = e => {\n    setFilter(e.target.value);\n  };\n  const handleSelectAllClick = event => {\n    if (event.target.checked) {\n      const newSelecteds = datasource.map(n => n.candidateId);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  const handleSubmitss = async e => {\n    e.preventDefault();\n\n    // Prepare the data to be sent to the API\n    const requestBody = {\n      navId,\n      // Use the navId from the selected course\n      name\n    };\n    console.log('Request Body:', requestBody); // Log the request body\n\n    // POST API call\n    try {\n      const response = await fetch('http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        const errorData = await response.json(); // Log error response\n        console.error('Error response from server:', errorData);\n        throw new Error('Failed to submit the form: ' + errorData.message);\n      }\n      const data = await response.json();\n      console.log('Form submitted successfully:', data);\n\n      // Optionally, you might want to fetch the updated data here\n      // await fetchData(); // Assuming fetchData is a function to fetch data\n\n      // Handle the success, close modal, or reset form\n      setIsSecondModalOpen(false);\n      setName('');\n    } catch (error) {\n      console.error('Error submitting the form:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-body\",\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'row',\n      // This will make the children align horizontally\n      flexWrap: 'wrap',\n      // Allows wrapping to next line if the width is exceeded\n      marginTop: '90px',\n      backgroundColor: '#f8f9fa',\n      // Light background color for the navbar\n      padding: '10px 20px',\n      // Padding for the navbar\n      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)',\n      // Subtle shadow for depth\n      borderRadius: '5px' // Optional: rounded corners\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsSecondModalOpen(true);\n        setNavId(user.navId);\n      },\n      className: \"btn btn-primary\",\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 19\n    }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }, this), \" \", !loading && !error && subNavData.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 57\n    }, this), \" \", !loading && !error && subNavData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '20px'\n      },\n      children: subNavData.map(subNav => {\n        // Dynamic route logic\n        const dynamicRoute = (() => {\n          switch (subNav.name) {\n            case \"OnBoarding\":\n              return \"/onboarding/28\";\n            case \"Profile\":\n              return \"/Profile\";\n            case \"test1\":\n              return \"/test1\";\n            // Specify the route for \"test1\"\n            case \"Students\":\n              return \"/Students\";\n            // Specify the route for \"test1\" \n            case \"All Courses\":\n              return \"/All Courses\";\n            // Specify the route for \"test1\"  \n            case \"Enroll\":\n              return \"/Enroll\";\n            // Specify the route for \"test1\"\n            case \"All Students\":\n              return \"/All Students\";\n            // Specify the route for \"test1\"\n            case \"Add Courses\":\n              return \"/Add Courses\";\n            // Specify the route for \"test1\"\n            default:\n              return ``;\n            // Default route mapping\n          }\n        })();\n        const isActive = location.pathname === dynamicRoute;\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: dynamicRoute,\n          onClick: handleClick(subNav.name) // Handle the OnBoarding redirection\n          ,\n          style: {\n            color: isActive ? '#fff' : '#000',\n            // Text color remains unchanged\n            backgroundColor: isActive ? '#007bff' // Active background color for all links\n            : subNav.name === 'Profile' ? '#ff5733' : subNav.name === 'OnBoarding' ? 'transparent' : 'transparent',\n            // Remove bg color for 'OnBoarding'\n            textDecoration: 'none',\n            padding: '10px 15px',\n            borderRadius: '4px',\n            transition: 'background-color 0.3s, color 0.3s' // Smooth transition for active state\n          },\n          children: subNav.name\n        }, subNav.subNavId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this), isSecondModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsSecondModalOpen(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmitss,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              value: name,\n              onChange: e => setName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"ODUfJ6kuBMtgjMZ7akpbk7K4Ff4=\", false, function () {\n  return [useLocation, useNavigate, useParams];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","useLocation","useNavigate","CloudUpload","CloudDownload","CheckCircleOutline","RemoveRedEye","Edit","Card","CardHeader","CardContent","CardActions","Button","Checkbox","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TablePagination","TextField","IconButton","jsxDEV","_jsxDEV","Profile","_s","subNavData","setSubNavData","loading","setLoading","error","setError","name","setName","isSecondModalOpen","setIsSecondModalOpen","user","setUser","location","filter","setFilter","datasource","setDatasource","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","directoryNavId","setDirectoryNavId","navigate","navId","routeNavId","setNavId","Number","undefined","isSelected","setIsSelected","handleClick","console","log","storedNavId","localStorage","getItem","fetchSubNavData","response","fetch","status","ok","Error","statusText","data","json","Array","isArray","length","message","handleFilterChange","e","target","value","handleSelectAllClick","event","checked","newSelecteds","map","n","candidateId","handlePageChange","newPage","handleRowsPerPageChange","handleSubmitss","preventDefault","requestBody","method","headers","body","JSON","stringify","errorData","className","style","display","justifyContent","alignItems","flexDirection","flexWrap","marginTop","backgroundColor","padding","boxShadow","borderRadius","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","gap","subNav","dynamicRoute","isActive","pathname","to","color","textDecoration","transition","subNavId","onSubmit","type","onChange","required","_c","$RefreshReg$"],"sources":["C:/Users/Akhil.t.EIS/Videos/IIA_Final/IIA_DASHBOARDS/src/Component/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link,useLocation  } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { CloudUpload, CloudDownload, CheckCircleOutline, RemoveRedEye, Edit } from '@mui/icons-material';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Checkbox,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  TextField,\r\n  IconButton,\r\n} from '@mui/material';\r\n\r\nconst Profile = () => {\r\n\r\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\r\n  const [loading, setLoading] = useState(true); // State to manage loading status\r\n  const [error, setError] = useState(null); // State for error handling\r\n  const [name, setName] = useState('');\r\n  const [isSecondModalOpen, setIsSecondModalOpen] = useState(false); // Second modal state\r\n  const [user, setUser] = useState('');\r\n  const location = useLocation(); \r\n  const [filter, setFilter] = useState('');\r\n  const [datasource, setDatasource] = useState([]); \r\n  const [selected, setSelected] = useState([]); \r\n  const [page, setPage] = useState(0); \r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [directoryNavId, setDirectoryNavId] = useState(null);\r\n  const navigate = useNavigate(); \r\n  const { navId: routeNavId } = useParams(); // Get navId from route parameters\r\n  const [navId, setNavId] = useState(() => (routeNavId ? Number(routeNavId) : undefined)); // Initialize navId with routeNavId\r\n  const [isSelected, setIsSelected] = useState(false); \r\n\r\n  useEffect(() => {\r\n    // Update navId whenever routeNavId changes\r\n    if (routeNavId) {\r\n      setNavId(Number(routeNavId));\r\n    }\r\n  }, [routeNavId]); // Runs when routeNavId changes\r\n\r\n\r\n  const handleClick = (navId) => {\r\n    console.log(navId)\r\n    \r\n      // Prevent the default link behavior\r\n      // history.push('/onboarding'); // Redirect to the OnBoarding page\r\n      navigate('/onboarding/${directoryNavId}'); \r\n    \r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    // Retrieve the DIRECTORY navId from localStorage when the page loads\r\n    const storedNavId = localStorage.getItem('directoryNavId');\r\n    \r\n    if (storedNavId) {\r\n      console.log('Retrieved DIRECTORY navId:', storedNavId);\r\n      setDirectoryNavId(storedNavId);\r\n    }\r\n  }, []); \r\n\r\n  useEffect(() => {\r\n    const fetchSubNavData = async () => {\r\n      if (!navId) {\r\n        console.error('navId is not set');\r\n        setLoading(false);\r\n        return; // Exit if navId is not defined\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\r\n        console.log(\"Response status:\", response.status); // Log response status\r\n\r\n        if (!response.ok) {\r\n          console.error('Response not OK:', response);\r\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('Fetched sub-navigation data:', data); // Log fetched data for debugging\r\n\r\n        // Check if the response structure is as expected\r\n        if (Array.isArray(data)) {\r\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\r\n        } else if (data) {\r\n          setSubNavData([data]); // If it's a single object, wrap it in an array\r\n        } else {\r\n          console.log('No valid data returned from API');\r\n          setSubNavData([]); // Reset state if no valid data\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sub-navigation data:', error);\r\n        setError(error.message); // Set error message to state\r\n      } finally {\r\n        setLoading(false); // Stop loading regardless of success or failure\r\n      }\r\n    };\r\n\r\n    fetchSubNavData(); // Call the fetch function whenever navId changes\r\n  }, [navId]); // Fetch data whenever navId changes\r\n\r\n\r\n  // Define a mapping between subNav names and routes\r\n  // useEffect(() => {\r\n  //   // Fetch your subNavData (dynamic data)\r\n  //   // Example fetch call:\r\n  //   setSubNavData([\r\n  //     { subNavId: 1, name: \"OnBoarding\" },\r\n  //     { subNavId: 2, name: \"Profile\" },\r\n  //     { subNavId: 3, name: \"Hr Executive\" },\r\n  //     { subNavId: 4, name: \"Hr Manager\" }, // Ensure this matches\r\n  //     { subNavId: 5, name: \"Summary\" }, // Ensure this matches \r\n     \r\n  //     // Add more dynamic data if necessary\r\n  //   ]);\r\n  // }, []);\r\n\r\n\r\n  // const handleClick = () => {\r\n  //   // Your click logic here\r\n  //   console.log(\"Item clicked\");\r\n  // };\r\n\r\n  const handleFilterChange = (e) => {\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = datasource.map((n) => n.candidateId);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n\r\n  const handleRowsPerPageChange = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleSubmitss = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Prepare the data to be sent to the API\r\n    const requestBody = {\r\n      navId, // Use the navId from the selected course\r\n      name,\r\n    };\r\n\r\n    console.log('Request Body:', requestBody); // Log the request body\r\n\r\n    // POST API call\r\n    try {\r\n      const response = await fetch('http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/add', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json(); // Log error response\r\n        console.error('Error response from server:', errorData);\r\n        throw new Error('Failed to submit the form: ' + errorData.message);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Form submitted successfully:', data);\r\n\r\n      // Optionally, you might want to fetch the updated data here\r\n      // await fetchData(); // Assuming fetchData is a function to fetch data\r\n\r\n      // Handle the success, close modal, or reset form\r\n      setIsSecondModalOpen(false);\r\n      setName('');\r\n    } catch (error) {\r\n      console.error('Error submitting the form:', error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div\r\n      className=\"content-body\"\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'row', // This will make the children align horizontally\r\n        flexWrap: 'wrap', // Allows wrapping to next line if the width is exceeded\r\n        marginTop: '90px',\r\n        backgroundColor: '#f8f9fa', // Light background color for the navbar\r\n        padding: '10px 20px', // Padding for the navbar\r\n        boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)', // Subtle shadow for depth\r\n        borderRadius: '5px', // Optional: rounded corners\r\n      }}\r\n    >\r\n\r\n      <button onClick={() => { setIsSecondModalOpen(true); setNavId(user.navId); }} className=\"btn btn-primary\">\r\n        Add\r\n      </button>\r\n      {loading && <p>Fetching data...</p>} {/* Show fetching message while loading */}\r\n      {error && <p>Error: {error}</p>} {/* Show error message if there's an error */}\r\n      {!loading && !error && subNavData.length === 0 && <p>No data available.</p>} {/* Message if no data */}\r\n      {!loading && !error && subNavData.length > 0 && (\r\n        <div style={{ display: 'flex', gap: '20px' }}>\r\n          {subNavData.map((subNav) => {\r\n            // Dynamic route logic\r\n            const dynamicRoute = (() => {\r\n              switch (subNav.name) {\r\n                case \"OnBoarding\":\r\n                  return \"/onboarding/28\";\r\n                case \"Profile\":\r\n                  return \"/Profile\";\r\n                case \"test1\":\r\n                  return \"/test1\"; // Specify the route for \"test1\"\r\n                case \"Students\":\r\n                  return \"/Students\"; // Specify the route for \"test1\" \r\n                case \"All Courses\":\r\n                  return \"/All Courses\"; // Specify the route for \"test1\"  \r\n                case \"Enroll\":\r\n                  return \"/Enroll\"; // Specify the route for \"test1\"\r\n                case \"All Students\":\r\n                  return \"/All Students\"; // Specify the route for \"test1\"\r\n                case \"Add Courses\":\r\n                  return \"/Add Courses\"; // Specify the route for \"test1\"\r\n                default:\r\n                  return ``; // Default route mapping\r\n              }\r\n            })();\r\n\r\n\r\n            const isActive = location.pathname === dynamicRoute;\r\n\r\n            return (\r\n              <Link\r\n      key={subNav.subNavId}\r\n      to={dynamicRoute}\r\n      onClick={handleClick(subNav.name)} // Handle the OnBoarding redirection\r\n      style={{\r\n        color: isActive ? '#fff' : '#000', // Text color remains unchanged\r\n        backgroundColor: isActive \r\n          ? '#007bff'  // Active background color for all links\r\n          : (subNav.name === 'Profile' ? '#ff5733' : (subNav.name === 'OnBoarding' ? 'transparent' : 'transparent')), // Remove bg color for 'OnBoarding'\r\n        textDecoration: 'none',\r\n        padding: '10px 15px',\r\n        borderRadius: '4px',\r\n        transition: 'background-color 0.3s, color 0.3s', // Smooth transition for active state\r\n      }}\r\n    >\r\n      {subNav.name}\r\n    </Link>\r\n              \r\n            \r\n            \r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n\r\n      {/* <Card>\r\n      <CardHeader\r\n        style={{ backgroundColor: 'whitesmoke', marginTop: '2%' }}\r\n        title={\r\n          <TextField\r\n            placeholder=\"Filter\"\r\n            value={filter}\r\n            onChange={handleFilterChange}\r\n            className=\"filterAlignment\"\r\n          />\r\n        }\r\n        action={\r\n          <>\r\n            <input\r\n              type=\"file\"\r\n              accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\r\n              style={{ display: 'none' }}\r\n              id=\"fileUpload\"\r\n            />\r\n            <label htmlFor=\"fileUpload\">\r\n              <Button variant=\"extendedFab\" component=\"span\">\r\n                <CloudDownload />\r\n                Import\r\n              </Button>\r\n            </label>\r\n            <Button variant=\"extendedFab\" onClick={() => console.log('Export')}>\r\n              <CloudUpload />\r\n              Export\r\n            </Button>\r\n            <Button variant=\"extendedFab\" onClick={() => console.log('Add')}>\r\n              +Add\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n\r\n      <TableContainer className=\"table-container\">\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell padding=\"checkbox\">\r\n                <Checkbox\r\n                  indeterminate={selected.length > 0 && selected.length < datasource.length}\r\n                  checked={datasource.length > 0 && selected.length === datasource.length}\r\n                  onChange={handleSelectAllClick}\r\n                />\r\n              </TableCell>\r\n              <TableCell>S.No</TableCell>\r\n              <TableCell>Category</TableCell>\r\n              <TableCell>Organization</TableCell>\r\n              <TableCell>Candidate Name</TableCell>\r\n              <TableCell>Email Id</TableCell>\r\n              <TableCell>Contact Number</TableCell>\r\n              <TableCell>Password</TableCell>\r\n              <TableCell>Role</TableCell>\r\n              <TableCell>Action</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {datasource\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row, index) => {\r\n                const isItemSelected = isSelected(row);\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.candidateId}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox checked={isItemSelected} />\r\n                    </TableCell>\r\n                    <TableCell>{index + 1}</TableCell>\r\n                    <TableCell>{row.jobTitleDesignation.replaceAll('_', ' ')}</TableCell>\r\n                    <TableCell>{row.candidateId}</TableCell>\r\n                    <TableCell>{row.candidateName}</TableCell>\r\n                    <TableCell>{row.contactNumber}</TableCell>\r\n                    <TableCell>{row.emailId}</TableCell>\r\n                    <TableCell>{row.serviceCommitment}</TableCell>\r\n                    <TableCell>{row.serviceBreakAmount}</TableCell>\r\n                    <TableCell>{row.ctc}</TableCell>\r\n                    <TableCell>{row.candidatesStatus}</TableCell>\r\n                    <TableCell>\r\n                      <IconButton onClick={() => console.log('View', row.candidateId)}>\r\n                        <RemoveRedEye />\r\n                      </IconButton>\r\n                      <IconButton onClick={() => console.log('Edit', row.candidateId)}>\r\n                        <Edit />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <CardActions>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25, 100]}\r\n          component=\"div\"\r\n          count={datasource.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handlePageChange}\r\n          onRowsPerPageChange={handleRowsPerPageChange}\r\n        />\r\n      </CardActions>\r\n    </Card> */}\r\n\r\n      {isSecondModalOpen && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <button className=\"close-button\" onClick={() => setIsSecondModalOpen(false)}>\r\n              &times;\r\n            </button>\r\n            <form onSubmit={handleSubmitss}>\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}