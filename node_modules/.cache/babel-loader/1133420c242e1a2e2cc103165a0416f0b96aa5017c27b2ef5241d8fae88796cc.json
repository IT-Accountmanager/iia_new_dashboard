{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akhil.t.EIS\\\\Videos\\\\IIA_Final\\\\IIA_DASHBOARDS\\\\src\\\\Component\\\\TopNavBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation, useNavigate, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopNavBar() {\n  _s();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\n  const [loading, setLoading] = useState(true); // State to manage loading status\n  const [error, setError] = useState(null); // State for error handling\n  const {\n    navId: routeNavId\n  } = useParams(); // Get navId from route parameters\n  const [navId, setNavId] = useState(() => {\n    // Initialize navId from route params or localStorage\n    const storedNavId = localStorage.getItem('directoryNavId');\n    return routeNavId ? Number(routeNavId) : storedNavId ? Number(storedNavId) : undefined;\n  });\n  const location = useLocation(); // Get current location\n  const navigate = useNavigate(); // Initialize useNavigate\n\n  useEffect(() => {\n    // Update navId whenever routeNavId changes\n    if (routeNavId) {\n      setNavId(Number(routeNavId));\n    }\n  }, [routeNavId]);\n  useEffect(() => {\n    const fetchSubNavData = async () => {\n      if (!navId) {\n        console.error('navId is not set');\n        setLoading(false);\n        return; // Exit if navId is not defined\n      }\n      try {\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\n        }\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\n        } else if (data) {\n          setSubNavData([data]); // If it's a single object, wrap it in an array\n        } else {\n          console.log('No valid data returned from API');\n          setSubNavData([]); // Reset state if no valid data\n        }\n      } catch (error) {\n        console.error('Error fetching sub-navigation data:', error);\n        setError(error.message); // Set error message to state\n      } finally {\n        setLoading(false); // Stop loading regardless of success or failure\n      }\n    };\n    fetchSubNavData(); // Call the fetch function whenever navId changes\n  }, [navId]); // Fetch data whenever navId changes\n\n  // Save navId to localStorage whenever it changes\n  useEffect(() => {\n    if (navId !== undefined) {\n      localStorage.setItem('directoryNavId', navId);\n    }\n  }, [navId]);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"navbar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `navbar-links ${isMenuOpen ? 'active' : ''}`,\n      style: {\n        display: 'flex',\n        gap: '2.2rem',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        paddingLeft: '10px'\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this) : subNavData.map(item => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/${item.name.replace(/\\s+/g, '-').toLowerCase()}/${item.subNavId}`,\n        children: item.name\n      }, item.subNavId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(TopNavBar, \"h7O8ohic3O2EzjrY3r8npGTUyFE=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = TopNavBar;\nexport default TopNavBar;\nvar _c;\n$RefreshReg$(_c, \"TopNavBar\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","useNavigate","Link","jsxDEV","_jsxDEV","TopNavBar","_s","isMenuOpen","setIsMenuOpen","subNavData","setSubNavData","loading","setLoading","error","setError","navId","routeNavId","setNavId","storedNavId","localStorage","getItem","Number","undefined","location","navigate","fetchSubNavData","console","response","fetch","ok","Error","statusText","data","json","Array","isArray","length","log","message","setItem","className","children","style","display","gap","alignItems","justifyContent","fontWeight","paddingLeft","fileName","_jsxFileName","lineNumber","columnNumber","map","item","to","name","replace","toLowerCase","subNavId","_c","$RefreshReg$"],"sources":["C:/Users/Akhil.t.EIS/Videos/IIA_Final/IIA_DASHBOARDS/src/Component/TopNavBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useLocation, useNavigate, Link } from 'react-router-dom';\r\n\r\nfunction TopNavBar() {\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n    const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\r\n    const [loading, setLoading] = useState(true); // State to manage loading status\r\n    const [error, setError] = useState(null); // State for error handling\r\n    const { navId: routeNavId } = useParams(); // Get navId from route parameters\r\n    const [navId, setNavId] = useState(() => {\r\n        // Initialize navId from route params or localStorage\r\n        const storedNavId = localStorage.getItem('directoryNavId');\r\n        return routeNavId ? Number(routeNavId) : storedNavId ? Number(storedNavId) : undefined;\r\n    });\r\n    const location = useLocation(); // Get current location\r\n    const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n    useEffect(() => {\r\n        // Update navId whenever routeNavId changes\r\n        if (routeNavId) {\r\n            setNavId(Number(routeNavId));\r\n        }\r\n    }, [routeNavId]);\r\n\r\n    useEffect(() => {\r\n        const fetchSubNavData = async () => {\r\n            if (!navId) {\r\n                console.error('navId is not set');\r\n                setLoading(false);\r\n                return; // Exit if navId is not defined\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                if (Array.isArray(data)) {\r\n                    setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\r\n                } else if (data) {\r\n                    setSubNavData([data]); // If it's a single object, wrap it in an array\r\n                } else {\r\n                    console.log('No valid data returned from API');\r\n                    setSubNavData([]); // Reset state if no valid data\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching sub-navigation data:', error);\r\n                setError(error.message); // Set error message to state\r\n            } finally {\r\n                setLoading(false); // Stop loading regardless of success or failure\r\n            }\r\n        };\r\n\r\n        fetchSubNavData(); // Call the fetch function whenever navId changes\r\n    }, [navId]); // Fetch data whenever navId changes\r\n\r\n   \r\n\r\n    // Save navId to localStorage whenever it changes\r\n    useEffect(() => {\r\n        if (navId !== undefined) {\r\n            localStorage.setItem('directoryNavId', navId);\r\n        }\r\n    }, [navId]);\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className={`navbar-links ${isMenuOpen ? 'active' : ''}`} style={{ display: 'flex', gap: '2.2rem', alignItems: 'center', justifyContent: 'center', fontWeight: 'bold', paddingLeft: '10px' }}>\r\n                {loading ? (\r\n                    <p>Loading...</p>\r\n                ) : error ? (\r\n                    <p>Error: {error}</p>\r\n                ) : (\r\n                    subNavData.map((item) => (\r\n                        <Link key={item.subNavId} to={`/${item.name.replace(/\\s+/g, '-').toLowerCase()}/${item.subNavId}`}>\r\n                            {item.name}\r\n                        </Link>\r\n                    ))\r\n                )}\r\n               \r\n            </div>\r\n           \r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default TopNavBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}