{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akhil.t.EIS\\\\Videos\\\\IIA_Final\\\\IIA_DASHBOARDS\\\\src\\\\Component\\\\TopNavBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopNavBar() {\n  _s();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\n  const [loading, setLoading] = useState(true); // State to manage loading status\n  const [error, setError] = useState(null); // State for error handling\n  const {\n    navId: routeNavId\n  } = useParams(); // Get navId from route parameters\n  const [navId, setNavId] = useState(() => routeNavId ? Number(routeNavId) : undefined); // Initialize navId with routeNavId\n  const location = useLocation(); // Get current location\n  const navigate = useNavigate(); // Initialize useNavigate\n\n  useEffect(() => {\n    // Update navId whenever routeNavId changes\n    if (routeNavId) {\n      setNavId(Number(routeNavId));\n    }\n  }, [routeNavId]);\n  useEffect(() => {\n    const fetchSubNavData = async () => {\n      if (!navId) {\n        console.error('navId is not set');\n        setLoading(false);\n        return; // Exit if navId is not defined\n      }\n      try {\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\n        }\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\n        } else if (data) {\n          setSubNavData([data]); // If it's a single object, wrap it in an array\n        } else {\n          console.log('No valid data returned from API');\n          setSubNavData([]); // Reset state if no valid data\n        }\n      } catch (error) {\n        console.error('Error fetching sub-navigation data:', error);\n        setError(error.message); // Set error message to state\n      } finally {\n        setLoading(false); // Stop loading regardless of success or failure\n      }\n    };\n    fetchSubNavData(); // Call the fetch function whenever navId changes\n  }, [navId]); // Fetch data whenever navId changes\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-logo\",\n      style: {\n        marginRight: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"MyApp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `navbar-links ${isMenuOpen ? 'active' : ''}`,\n      style: {\n        display: 'flex',\n        gap: '1rem',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: 0,\n          textAlign: 'center'\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: 0,\n          textAlign: 'center',\n          color: 'red'\n        },\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this) : subNavData.map(item => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/${item.name.replace(/\\s+/g, '-').toLowerCase()}/${item.subNavId}`,\n        style: {\n          textDecoration: 'none',\n          color: 'black'\n        },\n        children: item.name\n      }, item.subNavId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login-button\",\n        style: {\n          padding: '0.5rem 1rem',\n          fontSize: '1rem'\n        },\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(TopNavBar, \"hFVcqi/D1kPgnEs1V+xsCB0HgAg=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = TopNavBar;\nexport default TopNavBar;\nvar _c;\n$RefreshReg$(_c, \"TopNavBar\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","useNavigate","Link","jsxDEV","_jsxDEV","TopNavBar","_s","isMenuOpen","setIsMenuOpen","toggleMenu","subNavData","setSubNavData","loading","setLoading","error","setError","navId","routeNavId","setNavId","Number","undefined","location","navigate","fetchSubNavData","console","response","fetch","ok","Error","statusText","data","json","Array","isArray","length","log","message","style","display","justifyContent","alignItems","padding","children","className","marginRight","to","fileName","_jsxFileName","lineNumber","columnNumber","gap","margin","textAlign","color","map","item","name","replace","toLowerCase","subNavId","textDecoration","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Akhil.t.EIS/Videos/IIA_Final/IIA_DASHBOARDS/src/Component/TopNavBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction TopNavBar() {\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n\r\n    const toggleMenu = () => {\r\n        setIsMenuOpen(!isMenuOpen);\r\n    };\r\n\r\n    const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\r\n    const [loading, setLoading] = useState(true); // State to manage loading status\r\n    const [error, setError] = useState(null); // State for error handling\r\n    const { navId: routeNavId } = useParams(); // Get navId from route parameters\r\n    const [navId, setNavId] = useState(() => (routeNavId ? Number(routeNavId) : undefined)); // Initialize navId with routeNavId\r\n    const location = useLocation(); // Get current location\r\n    const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n    useEffect(() => {\r\n        // Update navId whenever routeNavId changes\r\n        if (routeNavId) {\r\n            setNavId(Number(routeNavId));\r\n        }\r\n    }, [routeNavId]);\r\n\r\n    useEffect(() => {\r\n        const fetchSubNavData = async () => {\r\n            if (!navId) {\r\n                console.error('navId is not set');\r\n                setLoading(false);\r\n                return; // Exit if navId is not defined\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                if (Array.isArray(data)) {\r\n                    setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\r\n                } else if (data) {\r\n                    setSubNavData([data]); // If it's a single object, wrap it in an array\r\n                } else {\r\n                    console.log('No valid data returned from API');\r\n                    setSubNavData([]); // Reset state if no valid data\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching sub-navigation data:', error);\r\n                setError(error.message); // Set error message to state\r\n            } finally {\r\n                setLoading(false); // Stop loading regardless of success or failure\r\n            }\r\n        };\r\n\r\n        fetchSubNavData(); // Call the fetch function whenever navId changes\r\n    }, [navId]); // Fetch data whenever navId changes\r\n\r\n    return (\r\n        <nav style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', padding: '1rem' }}>\r\n      <div className=\"navbar-logo\" style={{ marginRight: 'auto' }}>\r\n        <Link to=\"/\">MyApp</Link>\r\n      </div>\r\n      <div \r\n        className={`navbar-links ${isMenuOpen ? 'active' : ''}`} \r\n        style={{ display: 'flex', gap: '1rem', alignItems: 'center', justifyContent: 'center' }}\r\n      >\r\n        {loading ? (\r\n          <p style={{ margin: 0, textAlign: 'center' }}>Loading...</p>\r\n        ) : error ? (\r\n          <p style={{ margin: 0, textAlign: 'center', color: 'red' }}>Error: {error}</p>\r\n        ) : (\r\n          subNavData.map((item) => (\r\n            <Link \r\n              key={item.subNavId} \r\n              to={`/${item.name.replace(/\\s+/g, '-').toLowerCase()}/${item.subNavId}`}\r\n              style={{ textDecoration: 'none', color: 'black' }}\r\n            >\r\n              {item.name}\r\n            </Link>\r\n          ))\r\n        )}\r\n        <button className=\"login-button\" style={{ padding: '0.5rem 1rem', fontSize: '1rem' }}>Login</button>\r\n      </div>\r\n    </nav>\r\n    );\r\n}\r\n\r\nexport default TopNavBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}