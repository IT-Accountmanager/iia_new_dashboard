{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akhil.t.EIS\\\\Videos\\\\IIA_Final\\\\IIA_DASHBOARDS\\\\src\\\\Component\\\\TopNavBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopNavBar() {\n  _s();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\n  const [loading, setLoading] = useState(true); // State to manage loading status\n  const [error, setError] = useState(null); // State for error handling\n  const {\n    navId: routeNavId\n  } = useParams(); // Get navId from route parameters\n  const [navId, setNavId] = useState(() => routeNavId ? Number(routeNavId) : undefined); // Initialize navId with routeNavId\n  const location = useLocation(); // Get current location\n  const navigate = useNavigate(); // Initialize useNavigate\n\n  useEffect(() => {\n    // Update navId whenever routeNavId changes\n    if (routeNavId) {\n      setNavId(Number(routeNavId));\n    }\n  }, [routeNavId]);\n  useEffect(() => {\n    const fetchSubNavData = async () => {\n      if (!navId) {\n        console.error('navId is not set');\n        setLoading(false);\n        return; // Exit if navId is not defined\n      }\n      try {\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\n        }\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\n        } else if (data) {\n          setSubNavData([data]); // If it's a single object, wrap it in an array\n        } else {\n          console.log('No valid data returned from API');\n          setSubNavData([]); // Reset state if no valid data\n        }\n      } catch (error) {\n        console.error('Error fetching sub-navigation data:', error);\n        setError(error.message); // Set error message to state\n      } finally {\n        setLoading(false); // Stop loading regardless of success or failure\n      }\n    };\n    fetchSubNavData(); // Call the fetch function whenever navId changes\n  }, [navId]); // Fetch data whenever navId changes\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-logo\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"MyApp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `navbar-links ${isMenuOpen ? 'active' : ''}`,\n      children: [loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this) : subNavData.map(item => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/${item.name.replace(/\\s+/g, '-').toLowerCase()}/${item.subNavId}`,\n        children: item.name\n      }, item.subNavId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login-button\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-toggle\",\n      onClick: toggleMenu,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(TopNavBar, \"hFVcqi/D1kPgnEs1V+xsCB0HgAg=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = TopNavBar;\nexport default TopNavBar;\nvar _c;\n$RefreshReg$(_c, \"TopNavBar\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","useNavigate","jsxDEV","_jsxDEV","TopNavBar","_s","isMenuOpen","setIsMenuOpen","toggleMenu","subNavData","setSubNavData","loading","setLoading","error","setError","navId","routeNavId","setNavId","Number","undefined","location","navigate","fetchSubNavData","console","response","fetch","ok","Error","statusText","data","json","Array","isArray","length","log","message","className","children","Link","to","fileName","_jsxFileName","lineNumber","columnNumber","map","item","name","replace","toLowerCase","subNavId","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Akhil.t.EIS/Videos/IIA_Final/IIA_DASHBOARDS/src/Component/TopNavBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction TopNavBar() {\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n\r\n  const toggleMenu = () => {\r\n    setIsMenuOpen(!isMenuOpen);\r\n  };\r\n\r\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\r\n  const [loading, setLoading] = useState(true); // State to manage loading status\r\n  const [error, setError] = useState(null); // State for error handling\r\n  const { navId: routeNavId } = useParams(); // Get navId from route parameters\r\n  const [navId, setNavId] = useState(() => (routeNavId ? Number(routeNavId) : undefined)); // Initialize navId with routeNavId\r\n  const location = useLocation(); // Get current location\r\n  const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n  useEffect(() => {\r\n    // Update navId whenever routeNavId changes\r\n    if (routeNavId) {\r\n      setNavId(Number(routeNavId));\r\n    }\r\n  }, [routeNavId]);\r\n\r\n  useEffect(() => {\r\n    const fetchSubNavData = async () => {\r\n      if (!navId) {\r\n        console.error('navId is not set');\r\n        setLoading(false);\r\n        return; // Exit if navId is not defined\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\r\n        }\r\n\r\n        const data = await response.json();\r\n        \r\n        if (Array.isArray(data)) {\r\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\r\n        } else if (data) {\r\n          setSubNavData([data]); // If it's a single object, wrap it in an array\r\n        } else {\r\n          console.log('No valid data returned from API');\r\n          setSubNavData([]); // Reset state if no valid data\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sub-navigation data:', error);\r\n        setError(error.message); // Set error message to state\r\n      } finally {\r\n        setLoading(false); // Stop loading regardless of success or failure\r\n      }\r\n    };\r\n\r\n    fetchSubNavData(); // Call the fetch function whenever navId changes\r\n  }, [navId]); // Fetch data whenever navId changes\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"navbar-logo\">\r\n        <Link to=\"/\">MyApp</Link>\r\n      </div>\r\n      <div className={`navbar-links ${isMenuOpen ? 'active' : ''}`}>\r\n        \r\n        \r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : error ? (\r\n          <p>Error: {error}</p>\r\n        ) : (\r\n          subNavData.map((item) => (\r\n            <Link key={item.subNavId} to={`/${item.name.replace(/\\s+/g, '-').toLowerCase()}/${item.subNavId}`}>\r\n              {item.name}\r\n            </Link>\r\n          ))\r\n        )}\r\n        <button className=\"login-button\">Login</button>\r\n      </div>\r\n      <div className=\"menu-toggle\" onClick={toggleMenu}>\r\n        <span className=\"bar\"></span>\r\n        <span className=\"bar\"></span>\r\n        <span className=\"bar\"></span>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default TopNavBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}