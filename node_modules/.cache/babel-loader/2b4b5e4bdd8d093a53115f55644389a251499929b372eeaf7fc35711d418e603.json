{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akhil.t.EIS\\\\Videos\\\\IIA_Final\\\\IIA_DASHBOARDS\\\\src\\\\Component\\\\OnBoarding.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link, useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport { CloudUpload, CloudDownload, CheckCircleOutline, RemoveRedEye, Edit } from '@mui/icons-material';\nimport { Card, CardHeader, CardContent, CardActions, Button, Checkbox, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TablePagination, TextField, IconButton } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OnBoarding = ({\n  subNavItems,\n  handleLinkClick\n}) => {\n  _s();\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\n  const [loading, setLoading] = useState(true); // State to manage loading status\n  const [error, setError] = useState(null); // State for error handling\n  const [name, setName] = useState('');\n  const [isSecondModalOpen, setIsSecondModalOpen] = useState(false); // Second modal state\n  const [user, setUser] = useState('');\n  const location = useLocation();\n  const [filter, setFilter] = useState('');\n  const [selected, setSelected] = useState([]);\n  const [selectedSubNavId, setSelectedSubNavId] = useState(null);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const {\n    navId: routeNavId\n  } = useParams(); // Get navId from route parameters\n  const [navId, setNavId] = useState(() => routeNavId ? Number(routeNavId) : undefined); // Initialize navId with routeNavId\n  const [isSelected, setIsSelected] = useState(false);\n  const [directoryNavId, setDirectoryNavId] = useState(null);\n  const navigate = useNavigate();\n  const datasource = [{\n    jobTitleDesignation: 'Junior_Engineer',\n    candidateId: 1,\n    candidateName: 'Kumar Ravi',\n    contactNumber: '9876543210',\n    emailId: 'rcreddy2222@gmail.com',\n    serviceCommitment: '3',\n    serviceBreakAmount: '200,000',\n    ctc: '240,000',\n    candidatesStatus: 'Pending'\n  }];\n  useEffect(() => {\n    // Retrieve the DIRECTORY navId from localStorage when the page loads\n    const storedNavId = localStorage.getItem('directoryNavId');\n    if (storedNavId) {\n      console.log('Retrieved DIRECTORY navId:', storedNavId);\n      setDirectoryNavId(storedNavId);\n    }\n  }, []);\n  useEffect(() => {\n    // Update navId whenever routeNavId changes\n    if (routeNavId) {\n      setNavId(Number(routeNavId));\n    }\n  }, [routeNavId]); // Runs when routeNavId changes\n\n  // const handleLinkClick = (subNav) => {\n  //   console.log(\"lll\")\n  //   // Example of custom logic\n  //   navigate(`/onboarding/${directoryNavId}`);\n  //   setSelectedSubNavId(subNav.subNavId);\n  //   // You can add more logic here (analytics, state updates, etc.)\n  // };\n\n  useEffect(() => {\n    const fetchSubNavData = async () => {\n      if (!navId) {\n        console.error('navId is not set');\n        setLoading(false);\n        return; // Exit if navId is not defined\n      }\n      try {\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\n        console.log(\"Response status:\", response.status); // Log response status\n\n        if (!response.ok) {\n          console.error('Response not OK:', response);\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\n        }\n        const data = await response.json();\n        console.log('Fetched sub-navigation data:', data); // Log fetched data for debugging\n\n        // Check if the response structure is as expected\n        if (Array.isArray(data)) {\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\n        } else if (data) {\n          setSubNavData([data]); // If it's a single object, wrap it in an array\n        } else {\n          console.log('No valid data returned from API');\n          setSubNavData([]); // Reset state if no valid data\n        }\n      } catch (error) {\n        console.error('Error fetching sub-navigation data:', error);\n        setError(error.message); // Set error message to state\n      } finally {\n        setLoading(false); // Stop loading regardless of success or failure\n      }\n    };\n    fetchSubNavData(); // Call the fetch function whenever navId changes\n  }, [navId]); // Fetch data whenever navId changes\n\n  // Define a mapping between subNav names and routes\n  // useEffect(() => {\n  //   // Fetch your subNavData (dynamic data)\n  //   // Example fetch call:\n  //   setSubNavData([\n  //     { subNavId: 1, name: \"OnBoarding\" },\n  //     { subNavId: 2, name: \"Profile\" },\n  //     { subNavId: 3, name: \"Hr Executive\" },\n  //     { subNavId: 4, name: \"Hr Manager\" }, // Ensure this matches\n  //     { subNavId: 5, name: \"Summary\" }, // Ensure this matches \n\n  //     // Add more dynamic data if necessary\n  //   ]);\n  // }, []);\n\n  const handleFilterChange = event => {\n    setFilter(event.target.value);\n  };\n  const handleSelectAllClick = event => {\n    if (event.target.checked) {\n      const newSelected = datasource.map(row => row.candidateId);\n      setSelected(newSelected);\n    } else {\n      setSelected([]);\n    }\n  };\n  const handleClick = (event, row) => {\n    const selectedIndex = selected.indexOf(row.candidateId);\n    let newSelected = [];\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, row.candidateId);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n    setSelected(newSelected);\n  };\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-body\",\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'row',\n      // This will make the children align horizontally\n      flexWrap: 'wrap',\n      // Allows wrapping to next line if the width is exceeded\n      marginTop: '90px',\n      backgroundColor: '#f8f9fa',\n      // Light background color for the navbar\n      padding: '10px 20px',\n      // Padding for the navbar\n      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)',\n      // Subtle shadow for depth\n      borderRadius: '5px' // Optional: rounded corners\n    },\n    children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 19\n    }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }, this), \" \", !loading && !error && subNavData.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 57\n    }, this), \" \", !loading && !error && subNavData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '20px'\n      },\n      children: subNavData.map(subNav => {\n        // Dynamic route logic\n        // Dynamic route generation\n        const dynamicRoute = `/${subNav.name.replace(/\\s+/g, '-').toLowerCase()}/${subNav.subNavId}`;\n        const isActive = location.pathname === dynamicRoute;\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: dynamicRoute // Dynamic route navigation\n          ,\n          onClick: () => handleLinkClick(subNav) // Handle click event\n          ,\n          style: {\n            color: isActive ? '#fff' : '#000',\n            // Text color logic\n            // backgroundColor: subNav.name === 'OnBoarding'\n            //   ? (isActive ? '#007bff' : '#007bff')  // Blue background for 'OnBoarding'\n            //   : (isActive ? '#007bff' : 'transparent'),  // Active links get blue background\n            textDecoration: 'none',\n            padding: '10px 15px',\n            borderRadius: '4px',\n            transition: 'background-color 0.3s, color 0.3s' // Smooth transition\n          },\n          children: subNav.name\n        }, subNav.subNavId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(OnBoarding, \"j8QGDL0XT+K2GQlDaUbjG8nx8EY=\", false, function () {\n  return [useLocation, useParams, useNavigate];\n});\n_c = OnBoarding;\nexport default OnBoarding;\nvar _c;\n$RefreshReg$(_c, \"OnBoarding\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","useLocation","useNavigate","Outlet","CloudUpload","CloudDownload","CheckCircleOutline","RemoveRedEye","Edit","Card","CardHeader","CardContent","CardActions","Button","Checkbox","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TablePagination","TextField","IconButton","jsxDEV","_jsxDEV","OnBoarding","subNavItems","handleLinkClick","_s","subNavData","setSubNavData","loading","setLoading","error","setError","name","setName","isSecondModalOpen","setIsSecondModalOpen","user","setUser","location","filter","setFilter","selected","setSelected","selectedSubNavId","setSelectedSubNavId","page","setPage","rowsPerPage","setRowsPerPage","navId","routeNavId","setNavId","Number","undefined","isSelected","setIsSelected","directoryNavId","setDirectoryNavId","navigate","datasource","jobTitleDesignation","candidateId","candidateName","contactNumber","emailId","serviceCommitment","serviceBreakAmount","ctc","candidatesStatus","storedNavId","localStorage","getItem","console","log","fetchSubNavData","response","fetch","status","ok","Error","statusText","data","json","Array","isArray","length","message","handleFilterChange","event","target","value","handleSelectAllClick","checked","newSelected","map","row","handleClick","selectedIndex","indexOf","concat","slice","handlePageChange","newPage","handleRowsPerPageChange","parseInt","className","style","display","justifyContent","alignItems","flexDirection","flexWrap","marginTop","backgroundColor","padding","boxShadow","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","gap","subNav","dynamicRoute","replace","toLowerCase","subNavId","isActive","pathname","to","onClick","color","textDecoration","transition","_c","$RefreshReg$"],"sources":["C:/Users/Akhil.t.EIS/Videos/IIA_Final/IIA_DASHBOARDS/src/Component/OnBoarding.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link,useLocation  } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Outlet} from 'react-router-dom';\r\n\r\n\r\nimport { CloudUpload, CloudDownload, CheckCircleOutline, RemoveRedEye, Edit } from '@mui/icons-material';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Checkbox,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  TextField,\r\n  IconButton,\r\n} from '@mui/material';\r\n\r\nconst OnBoarding = ({ subNavItems, handleLinkClick }) => {\r\n\r\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\r\n  const [loading, setLoading] = useState(true); // State to manage loading status\r\n  const [error, setError] = useState(null); // State for error handling\r\n  const [name, setName] = useState('');\r\n  const [isSecondModalOpen, setIsSecondModalOpen] = useState(false); // Second modal state\r\n  const [user, setUser] = useState('');\r\n  const location = useLocation(); \r\n  const [filter, setFilter] = useState('');\r\n  const [selected, setSelected] = useState([]); \r\n  const [selectedSubNavId, setSelectedSubNavId] = useState(null);\r\n  const [page, setPage] = useState(0); \r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const { navId: routeNavId } = useParams(); // Get navId from route parameters\r\n  const [navId, setNavId] = useState(() => (routeNavId ? Number(routeNavId) : undefined)); // Initialize navId with routeNavId\r\n  const [isSelected, setIsSelected] = useState(false); \r\n  const [directoryNavId, setDirectoryNavId] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const datasource = [\r\n    {\r\n      jobTitleDesignation: 'Junior_Engineer',\r\n      candidateId: 1,\r\n      candidateName: 'Kumar Ravi',\r\n      contactNumber: '9876543210',\r\n      emailId: 'rcreddy2222@gmail.com',\r\n      serviceCommitment: '3',\r\n      serviceBreakAmount: '200,000',\r\n      ctc: '240,000',\r\n      candidatesStatus: 'Pending',\r\n    },\r\n   \r\n  ];\r\n\r\n\r\n  useEffect(() => {\r\n    // Retrieve the DIRECTORY navId from localStorage when the page loads\r\n    const storedNavId = localStorage.getItem('directoryNavId');\r\n    \r\n    if (storedNavId) {\r\n      console.log('Retrieved DIRECTORY navId:', storedNavId);\r\n      setDirectoryNavId(storedNavId);\r\n    }\r\n  }, []); \r\n\r\n  useEffect(() => {\r\n    // Update navId whenever routeNavId changes\r\n    if (routeNavId) {\r\n      setNavId(Number(routeNavId));\r\n    }\r\n  }, [routeNavId]); // Runs when routeNavId changes\r\n\r\n\r\n  // const handleLinkClick = (subNav) => {\r\n  //   console.log(\"lll\")\r\n  //   // Example of custom logic\r\n  //   navigate(`/onboarding/${directoryNavId}`);\r\n  //   setSelectedSubNavId(subNav.subNavId);\r\n  //   // You can add more logic here (analytics, state updates, etc.)\r\n  // };\r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchSubNavData = async () => {\r\n      if (!navId) {\r\n        console.error('navId is not set');\r\n        setLoading(false);\r\n        return; // Exit if navId is not defined\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\r\n        console.log(\"Response status:\", response.status); // Log response status\r\n\r\n        if (!response.ok) {\r\n          console.error('Response not OK:', response);\r\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('Fetched sub-navigation data:', data); // Log fetched data for debugging\r\n\r\n        // Check if the response structure is as expected\r\n        if (Array.isArray(data)) {\r\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\r\n        } else if (data) {\r\n          setSubNavData([data]); // If it's a single object, wrap it in an array\r\n        } else {\r\n          console.log('No valid data returned from API');\r\n          setSubNavData([]); // Reset state if no valid data\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sub-navigation data:', error);\r\n        setError(error.message); // Set error message to state\r\n      } finally {\r\n        setLoading(false); // Stop loading regardless of success or failure\r\n      }\r\n    };\r\n\r\n    fetchSubNavData(); // Call the fetch function whenever navId changes\r\n  }, [navId]); // Fetch data whenever navId changes\r\n\r\n\r\n  // Define a mapping between subNav names and routes\r\n  // useEffect(() => {\r\n  //   // Fetch your subNavData (dynamic data)\r\n  //   // Example fetch call:\r\n  //   setSubNavData([\r\n  //     { subNavId: 1, name: \"OnBoarding\" },\r\n  //     { subNavId: 2, name: \"Profile\" },\r\n  //     { subNavId: 3, name: \"Hr Executive\" },\r\n  //     { subNavId: 4, name: \"Hr Manager\" }, // Ensure this matches\r\n  //     { subNavId: 5, name: \"Summary\" }, // Ensure this matches \r\n     \r\n  //     // Add more dynamic data if necessary\r\n  //   ]);\r\n  // }, []);\r\n\r\n\r\n  \r\n\r\n\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelected = datasource.map((row) => row.candidateId);\r\n      setSelected(newSelected);\r\n    } else {\r\n      setSelected([]);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event, row) => {\r\n    const selectedIndex = selected.indexOf(row.candidateId);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, row.candidateId);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleRowsPerPageChange = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n \r\n\r\n\r\n\r\n\r\n \r\n \r\n  \r\n\r\n  return (\r\n    <div\r\n      className=\"content-body\"\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'row', // This will make the children align horizontally\r\n        flexWrap: 'wrap', // Allows wrapping to next line if the width is exceeded\r\n        marginTop: '90px',\r\n        backgroundColor: '#f8f9fa', // Light background color for the navbar\r\n        padding: '10px 20px', // Padding for the navbar\r\n        boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)', // Subtle shadow for depth\r\n        borderRadius: '5px', // Optional: rounded corners\r\n      }}\r\n    >\r\n\r\n      {/* <button onClick={() => { setIsSecondModalOpen(true); setNavId(user.navId); }} className=\"btn btn-primary\">\r\n        Add\r\n      </button> */}\r\n      {loading && <p>Fetching data...</p>} {/* Show fetching message while loading */}\r\n      {error && <p>Error: {error}</p>} {/* Show error message if there's an error */}\r\n      {!loading && !error && subNavData.length === 0 && <p>No data available.</p>} {/* Message if no data */}\r\n      {!loading && !error && subNavData.length > 0 && (\r\n        <div style={{ display: 'flex', gap: '20px' }}>\r\n          {subNavData.map((subNav) => {\r\n            // Dynamic route logic\r\n          // Dynamic route generation\r\nconst dynamicRoute = `/${subNav.name.replace(/\\s+/g, '-').toLowerCase()}/${subNav.subNavId}`;\r\n\r\n\r\n\r\n            const isActive = location.pathname === dynamicRoute;\r\n\r\n            return (\r\n              <Link\r\n              key={subNav.subNavId}\r\n              to={dynamicRoute} // Dynamic route navigation\r\n              onClick={() => handleLinkClick(subNav)} // Handle click event\r\n              style={{\r\n                color: isActive ? '#fff' : '#000', // Text color logic\r\n                // backgroundColor: subNav.name === 'OnBoarding'\r\n                //   ? (isActive ? '#007bff' : '#007bff')  // Blue background for 'OnBoarding'\r\n                //   : (isActive ? '#007bff' : 'transparent'),  // Active links get blue background\r\n                textDecoration: 'none',\r\n                padding: '10px 15px',\r\n                borderRadius: '4px',\r\n                transition: 'background-color 0.3s, color 0.3s', // Smooth transition\r\n              }}\r\n            >\r\n              {subNav.name}\r\n            </Link>\r\n            \r\n              \r\n            \r\n            \r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n\r\n\r\n    {/* <Card>\r\n      <CardHeader\r\n        style={{ backgroundColor: 'whitesmoke', marginTop: '2%' }}\r\n        title={\r\n          <TextField\r\n            placeholder=\"Filter\"\r\n            value={filter}\r\n            onChange={handleFilterChange}\r\n            className=\"filterAlignment\"\r\n          />\r\n        }\r\n        action={\r\n          <>\r\n            <input\r\n              type=\"file\"\r\n              accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\r\n              style={{ display: 'none' }}\r\n              id=\"fileUpload\"\r\n            />\r\n            <label htmlFor=\"fileUpload\">\r\n              <Button variant=\"extendedFab\" component=\"span\">\r\n                <CloudDownload />\r\n                Import\r\n              </Button>\r\n            </label>\r\n            <Button variant=\"extendedFab\" onClick={() => console.log('Export')}>\r\n              <CloudUpload />\r\n              Export\r\n            </Button>\r\n            <Button variant=\"extendedFab\" onClick={() => console.log('Add')}>\r\n              +Add\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n      <TableContainer>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell padding=\"checkbox\">\r\n                <Checkbox\r\n                  indeterminate={selected.length > 0 && selected.length < datasource.length}\r\n                  checked={datasource.length > 0 && selected.length === datasource.length}\r\n                  onChange={handleSelectAllClick}\r\n                />\r\n              </TableCell>\r\n              <TableCell>S.No</TableCell>\r\n              <TableCell>Category</TableCell>\r\n              <TableCell>Organization</TableCell>\r\n              <TableCell>Candidate Name</TableCell>\r\n              <TableCell>Email Id</TableCell>\r\n              <TableCell>Contact Number</TableCell>\r\n              <TableCell>Password</TableCell>\r\n              <TableCell>Role</TableCell>\r\n              <TableCell>Action</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {datasource\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row, index) => {\r\n              \r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                \r\n                    tabIndex={-1}\r\n                    key={row.candidateId}\r\n                   \r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox />\r\n                    </TableCell>\r\n                    <TableCell>{index + 1}</TableCell>\r\n                    <TableCell>{row.jobTitleDesignation.replaceAll('_', ' ')}</TableCell>\r\n                    <TableCell>{row.candidateId}</TableCell>\r\n                    <TableCell>{row.candidateName}</TableCell>\r\n                    <TableCell>{row.contactNumber}</TableCell>\r\n                    <TableCell>{row.emailId}</TableCell>\r\n                    <TableCell>{row.serviceCommitment}</TableCell>\r\n                    <TableCell>{row.serviceBreakAmount}</TableCell>\r\n                    <TableCell>{row.ctc}</TableCell>\r\n                    <TableCell>{row.candidatesStatus}</TableCell>\r\n                    <TableCell>\r\n                      <IconButton onClick={() => console.log('View', row.candidateId)}>\r\n                        <RemoveRedEye />\r\n                      </IconButton>\r\n                      <IconButton onClick={() => console.log('Edit', row.candidateId)}>\r\n                        <Edit />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <CardActions>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25, 100]}\r\n          component=\"div\"\r\n          count={datasource.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handlePageChange}\r\n          onRowsPerPageChange={handleRowsPerPageChange}\r\n        />\r\n      </CardActions>\r\n    </Card> */}\r\n      {/* {isSecondModalOpen && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <button className=\"close-button\" onClick={() => setIsSecondModalOpen(false)}>\r\n              &times;\r\n            </button>\r\n            <form onSubmit>\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )} */}\r\n    </div>\r\n    \r\n\r\n  );\r\n  \r\n};\r\n\r\nexport default OnBoarding;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,EAACC,WAAW,QAAS,kBAAkB;AAC/D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,MAAM,QAAO,kBAAkB;AAGxC,SAASC,WAAW,EAAEC,aAAa,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,IAAI,QAAQ,qBAAqB;AACxG,SACEC,IAAI,EACJC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,MAAM,EACNC,QAAQ,EACRC,KAAK,EACLC,SAAS,EACTC,SAAS,EACTC,cAAc,EACdC,SAAS,EACTC,QAAQ,EACRC,eAAe,EACfC,SAAS,EACTC,UAAU,QACL,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,UAAU,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAEvD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACkC,OAAO,EAAEC,UAAU,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACsC,IAAI,EAAEC,OAAO,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACwC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC0C,IAAI,EAAEC,OAAO,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM4C,QAAQ,GAAGzC,WAAW,CAAC,CAAC;EAC9B,MAAM,CAAC0C,MAAM,EAAEC,SAAS,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC+C,QAAQ,EAAEC,WAAW,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlD,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACmD,IAAI,EAAEC,OAAO,CAAC,GAAGpD,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACqD,WAAW,EAAEC,cAAc,CAAC,GAAGtD,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM;IAAEuD,KAAK,EAAEC;EAAW,CAAC,GAAGvD,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACsD,KAAK,EAAEE,QAAQ,CAAC,GAAGzD,QAAQ,CAAC,MAAOwD,UAAU,GAAGE,MAAM,CAACF,UAAU,CAAC,GAAGG,SAAU,CAAC,CAAC,CAAC;EACzF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC8D,cAAc,EAAEC,iBAAiB,CAAC,GAAG/D,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAMgE,QAAQ,GAAG5D,WAAW,CAAC,CAAC;EAE9B,MAAM6D,UAAU,GAAG,CACjB;IACEC,mBAAmB,EAAE,iBAAiB;IACtCC,WAAW,EAAE,CAAC;IACdC,aAAa,EAAE,YAAY;IAC3BC,aAAa,EAAE,YAAY;IAC3BC,OAAO,EAAE,uBAAuB;IAChCC,iBAAiB,EAAE,GAAG;IACtBC,kBAAkB,EAAE,SAAS;IAC7BC,GAAG,EAAE,SAAS;IACdC,gBAAgB,EAAE;EACpB,CAAC,CAEF;EAGD3E,SAAS,CAAC,MAAM;IACd;IACA,MAAM4E,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAE1D,IAAIF,WAAW,EAAE;MACfG,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEJ,WAAW,CAAC;MACtDZ,iBAAiB,CAACY,WAAW,CAAC;IAChC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN5E,SAAS,CAAC,MAAM;IACd;IACA,IAAIyD,UAAU,EAAE;MACdC,QAAQ,CAACC,MAAM,CAACF,UAAU,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC,CAAC,CAAC;;EAGlB;EACA;EACA;EACA;EACA;EACA;EACA;;EAIAzD,SAAS,CAAC,MAAM;IACd,MAAMiF,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI,CAACzB,KAAK,EAAE;QACVuB,OAAO,CAAC1C,KAAK,CAAC,kBAAkB,CAAC;QACjCD,UAAU,CAAC,KAAK,CAAC;QACjB,OAAO,CAAC;MACV;MAEA,IAAI;QACF,MAAM8C,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAiE3B,KAAK,EAAE,CAAC;QACtGuB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC;;QAElD,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UAChBN,OAAO,CAAC1C,KAAK,CAAC,kBAAkB,EAAE6C,QAAQ,CAAC;UAC3C,MAAM,IAAII,KAAK,CAAC,uCAAuC,GAAGJ,QAAQ,CAACK,UAAU,CAAC;QAChF;QAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCV,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEQ,IAAI,CAAC,CAAC,CAAC;;QAEnD;QACA,IAAIE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;UACvBtD,aAAa,CAACsD,IAAI,CAACI,MAAM,GAAG,CAAC,GAAGJ,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;QAC9C,CAAC,MAAM,IAAIA,IAAI,EAAE;UACftD,aAAa,CAAC,CAACsD,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM;UACLT,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAC9C9C,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;QACrB;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACd0C,OAAO,CAAC1C,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3DC,QAAQ,CAACD,KAAK,CAACwD,OAAO,CAAC,CAAC,CAAC;MAC3B,CAAC,SAAS;QACRzD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAED6C,eAAe,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,CAACzB,KAAK,CAAC,CAAC,CAAC,CAAC;;EAGb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAMA,MAAMsC,kBAAkB,GAAIC,KAAK,IAAK;IACpChD,SAAS,CAACgD,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMC,oBAAoB,GAAIH,KAAK,IAAK;IACtC,IAAIA,KAAK,CAACC,MAAM,CAACG,OAAO,EAAE;MACxB,MAAMC,WAAW,GAAGlC,UAAU,CAACmC,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAAClC,WAAW,CAAC;MAC5DnB,WAAW,CAACmD,WAAW,CAAC;IAC1B,CAAC,MAAM;MACLnD,WAAW,CAAC,EAAE,CAAC;IACjB;EACF,CAAC;EAED,MAAMsD,WAAW,GAAGA,CAACR,KAAK,EAAEO,GAAG,KAAK;IAClC,MAAME,aAAa,GAAGxD,QAAQ,CAACyD,OAAO,CAACH,GAAG,CAAClC,WAAW,CAAC;IACvD,IAAIgC,WAAW,GAAG,EAAE;IAEpB,IAAII,aAAa,KAAK,CAAC,CAAC,EAAE;MACxBJ,WAAW,GAAGA,WAAW,CAACM,MAAM,CAAC1D,QAAQ,EAAEsD,GAAG,CAAClC,WAAW,CAAC;IAC7D,CAAC,MAAM,IAAIoC,aAAa,KAAK,CAAC,EAAE;MAC9BJ,WAAW,GAAGA,WAAW,CAACM,MAAM,CAAC1D,QAAQ,CAAC2D,KAAK,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,MAAM,IAAIH,aAAa,KAAKxD,QAAQ,CAAC4C,MAAM,GAAG,CAAC,EAAE;MAChDQ,WAAW,GAAGA,WAAW,CAACM,MAAM,CAAC1D,QAAQ,CAAC2D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC,MAAM,IAAIH,aAAa,GAAG,CAAC,EAAE;MAC5BJ,WAAW,GAAGA,WAAW,CAACM,MAAM,CAC9B1D,QAAQ,CAAC2D,KAAK,CAAC,CAAC,EAAEH,aAAa,CAAC,EAChCxD,QAAQ,CAAC2D,KAAK,CAACH,aAAa,GAAG,CAAC,CAClC,CAAC;IACH;IAEAvD,WAAW,CAACmD,WAAW,CAAC;EAC1B,CAAC;EAED,MAAMQ,gBAAgB,GAAGA,CAACb,KAAK,EAAEc,OAAO,KAAK;IAC3CxD,OAAO,CAACwD,OAAO,CAAC;EAClB,CAAC;EAED,MAAMC,uBAAuB,GAAIf,KAAK,IAAK;IACzCxC,cAAc,CAACwD,QAAQ,CAAChB,KAAK,CAACC,MAAM,CAACC,KAAK,EAAE,EAAE,CAAC,CAAC;IAChD5C,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC;EAWD,oBACEzB,OAAA;IACEoF,SAAS,EAAC,cAAc;IACxBC,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE,QAAQ;MACpBC,aAAa,EAAE,KAAK;MAAE;MACtBC,QAAQ,EAAE,MAAM;MAAE;MAClBC,SAAS,EAAE,MAAM;MACjBC,eAAe,EAAE,SAAS;MAAE;MAC5BC,OAAO,EAAE,WAAW;MAAE;MACtBC,SAAS,EAAE,8BAA8B;MAAE;MAC3CC,YAAY,EAAE,KAAK,CAAE;IACvB,CAAE;IAAAC,QAAA,GAMDzF,OAAO,iBAAIP,OAAA;MAAAgG,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAAC,GAAC,EACpC3F,KAAK,iBAAIT,OAAA;MAAAgG,QAAA,GAAG,SAAO,EAACvF,KAAK;IAAA;MAAAwF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAC,EAChC,CAAC7F,OAAO,IAAI,CAACE,KAAK,IAAIJ,UAAU,CAAC2D,MAAM,KAAK,CAAC,iBAAIhE,OAAA;MAAAgG,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAAC,GAAC,EAC5E,CAAC7F,OAAO,IAAI,CAACE,KAAK,IAAIJ,UAAU,CAAC2D,MAAM,GAAG,CAAC,iBAC1ChE,OAAA;MAAKqF,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEe,GAAG,EAAE;MAAO,CAAE;MAAAL,QAAA,EAC1C3F,UAAU,CAACoE,GAAG,CAAE6B,MAAM,IAAK;QAC1B;QACF;QACV,MAAMC,YAAY,GAAG,IAAID,MAAM,CAAC3F,IAAI,CAAC6F,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC,IAAIH,MAAM,CAACI,QAAQ,EAAE;QAIhF,MAAMC,QAAQ,GAAG1F,QAAQ,CAAC2F,QAAQ,KAAKL,YAAY;QAEnD,oBACEvG,OAAA,CAACzB,IAAI;UAELsI,EAAE,EAAEN,YAAa,CAAC;UAAA;UAClBO,OAAO,EAAEA,CAAA,KAAM3G,eAAe,CAACmG,MAAM,CAAE,CAAC;UAAA;UACxCjB,KAAK,EAAE;YACL0B,KAAK,EAAEJ,QAAQ,GAAG,MAAM,GAAG,MAAM;YAAE;YACnC;YACA;YACA;YACAK,cAAc,EAAE,MAAM;YACtBnB,OAAO,EAAE,WAAW;YACpBE,YAAY,EAAE,KAAK;YACnBkB,UAAU,EAAE,mCAAmC,CAAE;UACnD,CAAE;UAAAjB,QAAA,EAEDM,MAAM,CAAC3F;QAAI,GAdP2F,MAAM,CAACI,QAAQ;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAehB,CAAC;MAMT,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OA2IE,CAAC;AAKV,CAAC;AAAChG,EAAA,CA1XIH,UAAU;EAAA,QAQGzB,WAAW,EAMEF,SAAS,EAItBG,WAAW;AAAA;AAAAyI,EAAA,GAlBxBjH,UAAU;AA4XhB,eAAeA,UAAU;AAAC,IAAAiH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}