{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akhil.t.EIS\\\\Videos\\\\IIA_Final\\\\IIA_DASHBOARDS\\\\src\\\\Component\\\\Courses.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Courses = () => {\n  _s();\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\n  const [loading, setLoading] = useState(true); // State to manage loading status\n  const [error, setError] = useState(null); // State for error handling\n  const [name, setName] = useState('');\n  const [isSecondModalOpen, setIsSecondModalOpen] = useState(false); // Second modal state\n  const [user, setUser] = useState('');\n  const {\n    navId: routeNavId\n  } = useParams(); // Get navId from route parameters\n  const [navId, setNavId] = useState(() => routeNavId ? Number(routeNavId) : undefined); // Initialize navId with routeNavId\n\n  useEffect(() => {\n    // Update navId whenever routeNavId changes\n    if (routeNavId) {\n      setNavId(Number(routeNavId));\n    }\n  }, [routeNavId]); // Runs when routeNavId changes\n\n  useEffect(() => {\n    const fetchSubNavData = async () => {\n      if (!navId) {\n        console.error('navId is not set');\n        setLoading(false);\n        return; // Exit if navId is not defined\n      }\n      try {\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\n        console.log(\"Response status:\", response.status); // Log response status\n\n        if (!response.ok) {\n          console.error('Response not OK:', response);\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\n        }\n        const data = await response.json();\n        console.log('Fetched sub-navigation data:', data); // Log fetched data for debugging\n\n        // Check if the response structure is as expected\n        if (Array.isArray(data)) {\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\n        } else if (data) {\n          setSubNavData([data]); // If it's a single object, wrap it in an array\n        } else {\n          console.log('No valid data returned from API');\n          setSubNavData([]); // Reset state if no valid data\n        }\n      } catch (error) {\n        console.error('Error fetching sub-navigation data:', error);\n        setError(error.message); // Set error message to state\n      } finally {\n        setLoading(false); // Stop loading regardless of success or failure\n      }\n    };\n    fetchSubNavData(); // Call the fetch function whenever navId changes\n  }, [navId]); // Fetch data whenever navId changes\n\n  // Define a mapping between subNav names and routes\n  useEffect(() => {\n    // Fetch your subNavData (dynamic data)\n    // Example fetch call:\n    setSubNavData([{\n      subNavId: 1,\n      name: \"All Courses\"\n    }, {\n      subNavId: 2,\n      name: \"Add Courses\"\n    }, {\n      subNavId: 3,\n      name: \"Students\"\n    }, {\n      subNavId: 4,\n      name: \"Profile\"\n    },\n    // Ensure this matches\n    {\n      subNavId: 5,\n      name: \"test1\"\n    },\n    // Ensure this matches \n    {\n      subNavId: 6,\n      name: \"Enroll\"\n    }\n    // Add more dynamic data if necessary\n    ]);\n  }, []);\n  const handleSubmitss = async e => {\n    e.preventDefault();\n\n    // Prepare the data to be sent to the API\n    const requestBody = {\n      navId,\n      // Use the navId from the selected course\n      name\n    };\n    console.log('Request Body:', requestBody); // Log the request body\n\n    // POST API call\n    try {\n      const response = await fetch('http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        const errorData = await response.json(); // Log error response\n        console.error('Error response from server:', errorData);\n        throw new Error('Failed to submit the form: ' + errorData.message);\n      }\n      const data = await response.json();\n      console.log('Form submitted successfully:', data);\n\n      // Optionally, you might want to fetch the updated data here\n      // await fetchData(); // Assuming fetchData is a function to fetch data\n\n      // Handle the success, close modal, or reset form\n      setIsSecondModalOpen(false);\n      setName('');\n    } catch (error) {\n      console.error('Error submitting the form:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-body\",\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'row',\n      // This will make the children align horizontally\n      flexWrap: 'wrap',\n      // Allows wrapping to next line if the width is exceeded\n      marginTop: '90px',\n      backgroundColor: '#f8f9fa',\n      // Light background color for the navbar\n      padding: '10px 20px',\n      // Padding for the navbar\n      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)',\n      // Subtle shadow for depth\n      borderRadius: '5px' // Optional: rounded corners\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsSecondModalOpen(true);\n        setNavId(user.navId);\n      },\n      className: \"btn btn-primary\",\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), \" \", !loading && !error && subNavData.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 57\n    }, this), \" \", !loading && !error && subNavData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '20px'\n      },\n      children: subNavData.map(subNav => {\n        // Dynamic route logic\n        const dynamicRoute = (() => {\n          switch (subNav.name) {\n            case \"Profile\":\n              return \"/Profile\";\n            case \"test1\":\n              return \"/test1\";\n            // Specify the route for \"test1\"\n            case \"Students\":\n              return \"/Students\";\n            // Specify the route for \"test1\" \n            case \"All Courses\":\n              return \"/All Courses\";\n            // Specify the route for \"test1\"  \n            case \"Enroll\":\n              return \"/Enroll\";\n            // Specify the route for \"test1\"\n            case \"All Students\":\n              return \"/All Students\";\n            // Specify the route for \"test1\"\n            case \"Add Courses\":\n              return \"/Add Courses\";\n            // Specify the route for \"test1\"\n            default:\n              return `/courses/${subNav.name.toLowerCase().replace(/\\s+/g, '-')}`;\n            // Default route mapping\n          }\n        })();\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: dynamicRoute,\n          style: {\n            color: '#000',\n            textDecoration: 'none',\n            padding: '10px 15px',\n            borderRadius: '4px',\n            transition: 'background-color 0.3s'\n          },\n          onMouseEnter: e => e.currentTarget.style.backgroundColor = '#e2e2e2',\n          onMouseLeave: e => e.currentTarget.style.backgroundColor = 'transparent',\n          children: subNav.name\n        }, subNav.subNavId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), isSecondModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsSecondModalOpen(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmitss,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              value: name,\n              onChange: e => setName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(Courses, \"DHbbdhALRWx7q1/xJ3hXIREDxrE=\", false, function () {\n  return [useParams];\n});\n_c = Courses;\nexport default Courses;\nvar _c;\n$RefreshReg$(_c, \"Courses\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","jsxDEV","_jsxDEV","Courses","_s","subNavData","setSubNavData","loading","setLoading","error","setError","name","setName","isSecondModalOpen","setIsSecondModalOpen","user","setUser","navId","routeNavId","setNavId","Number","undefined","fetchSubNavData","console","response","fetch","log","status","ok","Error","statusText","data","json","Array","isArray","length","message","subNavId","handleSubmitss","e","preventDefault","requestBody","method","headers","body","JSON","stringify","errorData","className","style","display","justifyContent","alignItems","flexDirection","flexWrap","marginTop","backgroundColor","padding","boxShadow","borderRadius","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","gap","map","subNav","dynamicRoute","toLowerCase","replace","to","color","textDecoration","transition","onMouseEnter","currentTarget","onMouseLeave","onSubmit","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/Akhil.t.EIS/Videos/IIA_Final/IIA_DASHBOARDS/src/Component/Courses.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nconst Courses = () => {\r\n\r\n  const [subNavData, setSubNavData] = useState([]); // State to hold sub-navigation data\r\n  const [loading, setLoading] = useState(true); // State to manage loading status\r\n  const [error, setError] = useState(null); // State for error handling\r\n  const [name, setName] = useState('');\r\n  const [isSecondModalOpen, setIsSecondModalOpen] = useState(false); // Second modal state\r\n  const [user, setUser] = useState('');\r\n\r\n  const { navId: routeNavId } = useParams(); // Get navId from route parameters\r\n  const [navId, setNavId] = useState(() => (routeNavId ? Number(routeNavId) : undefined)); // Initialize navId with routeNavId\r\n\r\n\r\n  useEffect(() => {\r\n    // Update navId whenever routeNavId changes\r\n    if (routeNavId) {\r\n      setNavId(Number(routeNavId));\r\n    }\r\n  }, [routeNavId]); // Runs when routeNavId changes\r\n\r\n  useEffect(() => {\r\n    const fetchSubNavData = async () => {\r\n      if (!navId) {\r\n        console.error('navId is not set');\r\n        setLoading(false);\r\n        return; // Exit if navId is not defined\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/subnav/${navId}`);\r\n        console.log(\"Response status:\", response.status); // Log response status\r\n\r\n        if (!response.ok) {\r\n          console.error('Response not OK:', response);\r\n          throw new Error('Failed to fetch sub-navigation data: ' + response.statusText);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('Fetched sub-navigation data:', data); // Log fetched data for debugging\r\n\r\n        // Check if the response structure is as expected\r\n        if (Array.isArray(data)) {\r\n          setSubNavData(data.length > 0 ? data : []); // If it's an array, set it directly\r\n        } else if (data) {\r\n          setSubNavData([data]); // If it's a single object, wrap it in an array\r\n        } else {\r\n          console.log('No valid data returned from API');\r\n          setSubNavData([]); // Reset state if no valid data\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sub-navigation data:', error);\r\n        setError(error.message); // Set error message to state\r\n      } finally {\r\n        setLoading(false); // Stop loading regardless of success or failure\r\n      }\r\n    };\r\n\r\n    fetchSubNavData(); // Call the fetch function whenever navId changes\r\n  }, [navId]); // Fetch data whenever navId changes\r\n\r\n\r\n  // Define a mapping between subNav names and routes\r\n  useEffect(() => {\r\n    // Fetch your subNavData (dynamic data)\r\n    // Example fetch call:\r\n    setSubNavData([\r\n      { subNavId: 1, name: \"All Courses\" },\r\n      { subNavId: 2, name: \"Add Courses\" },\r\n      { subNavId: 3, name: \"Students\" },\r\n      { subNavId: 4, name: \"Profile\" }, // Ensure this matches\r\n      { subNavId: 5, name: \"test1\" }, // Ensure this matches \r\n      { subNavId: 6, name: \"Enroll\" },\r\n      // Add more dynamic data if necessary\r\n    ]);\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  const handleSubmitss = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Prepare the data to be sent to the API\r\n    const requestBody = {\r\n      navId, // Use the navId from the selected course\r\n      name,\r\n    };\r\n\r\n    console.log('Request Body:', requestBody); // Log the request body\r\n\r\n    // POST API call\r\n    try {\r\n      const response = await fetch('http://10.10.20.9:7071/IIA-Website-1.0.0/subsidenavbar/add', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json(); // Log error response\r\n        console.error('Error response from server:', errorData);\r\n        throw new Error('Failed to submit the form: ' + errorData.message);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Form submitted successfully:', data);\r\n\r\n      // Optionally, you might want to fetch the updated data here\r\n      // await fetchData(); // Assuming fetchData is a function to fetch data\r\n\r\n      // Handle the success, close modal, or reset form\r\n      setIsSecondModalOpen(false);\r\n      setName('');\r\n    } catch (error) {\r\n      console.error('Error submitting the form:', error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div\r\n      className=\"content-body\"\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'row', // This will make the children align horizontally\r\n        flexWrap: 'wrap', // Allows wrapping to next line if the width is exceeded\r\n        marginTop: '90px',\r\n        backgroundColor: '#f8f9fa', // Light background color for the navbar\r\n        padding: '10px 20px', // Padding for the navbar\r\n        boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)', // Subtle shadow for depth\r\n        borderRadius: '5px', // Optional: rounded corners\r\n      }}\r\n    >\r\n\r\n      <button onClick={() => { setIsSecondModalOpen(true); setNavId(user.navId); }} className=\"btn btn-primary\">\r\n        Add\r\n      </button>\r\n      {loading && <p>Fetching data...</p>} {/* Show fetching message while loading */}\r\n      {error && <p>Error: {error}</p>} {/* Show error message if there's an error */}\r\n      {!loading && !error && subNavData.length === 0 && <p>No data available.</p>} {/* Message if no data */}\r\n      {!loading && !error && subNavData.length > 0 && (\r\n        <div style={{ display: 'flex', gap: '20px' }}>\r\n          {subNavData.map((subNav) => {\r\n            // Dynamic route logic\r\n            const dynamicRoute = (() => {\r\n              switch (subNav.name) {\r\n                case \"Profile\":\r\n                  return \"/Profile\";\r\n                case \"test1\":\r\n                  return \"/test1\"; // Specify the route for \"test1\"\r\n                case \"Students\":\r\n                  return \"/Students\"; // Specify the route for \"test1\" \r\n                case \"All Courses\":\r\n                  return \"/All Courses\"; // Specify the route for \"test1\"  \r\n                case \"Enroll\":\r\n                  return \"/Enroll\"; // Specify the route for \"test1\"\r\n                case \"All Students\":\r\n                  return \"/All Students\"; // Specify the route for \"test1\"\r\n                case \"Add Courses\":\r\n                  return \"/Add Courses\"; // Specify the route for \"test1\"\r\n                default:\r\n                  return `/courses/${subNav.name.toLowerCase().replace(/\\s+/g, '-')}`; // Default route mapping\r\n              }\r\n            })();\r\n\r\n            return (\r\n              <Link\r\n                key={subNav.subNavId}\r\n                to={dynamicRoute}\r\n                style={{\r\n                  color: '#000',\r\n                  textDecoration: 'none',\r\n                  padding: '10px 15px',\r\n                  borderRadius: '4px',\r\n                  transition: 'background-color 0.3s',\r\n                }}\r\n                onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#e2e2e2'}\r\n                onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\r\n              >\r\n                {subNav.name}\r\n              </Link>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {isSecondModalOpen && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <button className=\"close-button\" onClick={() => setIsSecondModalOpen(false)}>\r\n              &times;\r\n            </button>\r\n            <form onSubmit={handleSubmitss}>\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Courses;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACe,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnE,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAM;IAAEmB,KAAK,EAAEC;EAAW,CAAC,GAAGnB,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACkB,KAAK,EAAEE,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,MAAOoB,UAAU,GAAGE,MAAM,CAACF,UAAU,CAAC,GAAGG,SAAU,CAAC,CAAC,CAAC;;EAGzFxB,SAAS,CAAC,MAAM;IACd;IACA,IAAIqB,UAAU,EAAE;MACdC,QAAQ,CAACC,MAAM,CAACF,UAAU,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC,CAAC,CAAC;;EAElBrB,SAAS,CAAC,MAAM;IACd,MAAMyB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI,CAACL,KAAK,EAAE;QACVM,OAAO,CAACd,KAAK,CAAC,kBAAkB,CAAC;QACjCD,UAAU,CAAC,KAAK,CAAC;QACjB,OAAO,CAAC;MACV;MAEA,IAAI;QACF,MAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAiER,KAAK,EAAE,CAAC;QACtGM,OAAO,CAACG,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAACG,MAAM,CAAC,CAAC,CAAC;;QAElD,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UAChBL,OAAO,CAACd,KAAK,CAAC,kBAAkB,EAAEe,QAAQ,CAAC;UAC3C,MAAM,IAAIK,KAAK,CAAC,uCAAuC,GAAGL,QAAQ,CAACM,UAAU,CAAC;QAChF;QAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCT,OAAO,CAACG,GAAG,CAAC,8BAA8B,EAAEK,IAAI,CAAC,CAAC,CAAC;;QAEnD;QACA,IAAIE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;UACvBzB,aAAa,CAACyB,IAAI,CAACI,MAAM,GAAG,CAAC,GAAGJ,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;QAC9C,CAAC,MAAM,IAAIA,IAAI,EAAE;UACfzB,aAAa,CAAC,CAACyB,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM;UACLR,OAAO,CAACG,GAAG,CAAC,iCAAiC,CAAC;UAC9CpB,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;QACrB;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdc,OAAO,CAACd,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3DC,QAAQ,CAACD,KAAK,CAAC2B,OAAO,CAAC,CAAC,CAAC;MAC3B,CAAC,SAAS;QACR5B,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDc,eAAe,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;;EAGb;EACApB,SAAS,CAAC,MAAM;IACd;IACA;IACAS,aAAa,CAAC,CACZ;MAAE+B,QAAQ,EAAE,CAAC;MAAE1B,IAAI,EAAE;IAAc,CAAC,EACpC;MAAE0B,QAAQ,EAAE,CAAC;MAAE1B,IAAI,EAAE;IAAc,CAAC,EACpC;MAAE0B,QAAQ,EAAE,CAAC;MAAE1B,IAAI,EAAE;IAAW,CAAC,EACjC;MAAE0B,QAAQ,EAAE,CAAC;MAAE1B,IAAI,EAAE;IAAU,CAAC;IAAE;IAClC;MAAE0B,QAAQ,EAAE,CAAC;MAAE1B,IAAI,EAAE;IAAQ,CAAC;IAAE;IAChC;MAAE0B,QAAQ,EAAE,CAAC;MAAE1B,IAAI,EAAE;IAAS;IAC9B;IAAA,CACD,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAKN,MAAM2B,cAAc,GAAG,MAAOC,CAAC,IAAK;IAClCA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,MAAMC,WAAW,GAAG;MAClBxB,KAAK;MAAE;MACPN;IACF,CAAC;IAEDY,OAAO,CAACG,GAAG,CAAC,eAAe,EAAEe,WAAW,CAAC,CAAC,CAAC;;IAE3C;IACA,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4D,EAAE;QACzFiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACjB,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAMmB,SAAS,GAAG,MAAMvB,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;QACzCT,OAAO,CAACd,KAAK,CAAC,6BAA6B,EAAEsC,SAAS,CAAC;QACvD,MAAM,IAAIlB,KAAK,CAAC,6BAA6B,GAAGkB,SAAS,CAACX,OAAO,CAAC;MACpE;MAEA,MAAML,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCT,OAAO,CAACG,GAAG,CAAC,8BAA8B,EAAEK,IAAI,CAAC;;MAEjD;MACA;;MAEA;MACAjB,oBAAoB,CAAC,KAAK,CAAC;MAC3BF,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdc,OAAO,CAACd,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAGD,oBACEP,OAAA;IACE8C,SAAS,EAAC,cAAc;IACxBC,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE,QAAQ;MACpBC,aAAa,EAAE,KAAK;MAAE;MACtBC,QAAQ,EAAE,MAAM;MAAE;MAClBC,SAAS,EAAE,MAAM;MACjBC,eAAe,EAAE,SAAS;MAAE;MAC5BC,OAAO,EAAE,WAAW;MAAE;MACtBC,SAAS,EAAE,8BAA8B;MAAE;MAC3CC,YAAY,EAAE,KAAK,CAAE;IACvB,CAAE;IAAAC,QAAA,gBAGF1D,OAAA;MAAQ2D,OAAO,EAAEA,CAAA,KAAM;QAAE/C,oBAAoB,CAAC,IAAI,CAAC;QAAEK,QAAQ,CAACJ,IAAI,CAACE,KAAK,CAAC;MAAE,CAAE;MAAC+B,SAAS,EAAC,iBAAiB;MAAAY,QAAA,EAAC;IAE1G;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACR1D,OAAO,iBAAIL,OAAA;MAAA0D,QAAA,EAAG;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAAC,GAAC,EACpCxD,KAAK,iBAAIP,OAAA;MAAA0D,QAAA,GAAG,SAAO,EAACnD,KAAK;IAAA;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAC,EAChC,CAAC1D,OAAO,IAAI,CAACE,KAAK,IAAIJ,UAAU,CAAC8B,MAAM,KAAK,CAAC,iBAAIjC,OAAA;MAAA0D,QAAA,EAAG;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAAC,GAAC,EAC5E,CAAC1D,OAAO,IAAI,CAACE,KAAK,IAAIJ,UAAU,CAAC8B,MAAM,GAAG,CAAC,iBAC1CjC,OAAA;MAAK+C,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEgB,GAAG,EAAE;MAAO,CAAE;MAAAN,QAAA,EAC1CvD,UAAU,CAAC8D,GAAG,CAAEC,MAAM,IAAK;QAC1B;QACA,MAAMC,YAAY,GAAG,CAAC,MAAM;UAC1B,QAAQD,MAAM,CAACzD,IAAI;YACjB,KAAK,SAAS;cACZ,OAAO,UAAU;YACnB,KAAK,OAAO;cACV,OAAO,QAAQ;YAAE;YACnB,KAAK,UAAU;cACb,OAAO,WAAW;YAAE;YACtB,KAAK,aAAa;cAChB,OAAO,cAAc;YAAE;YACzB,KAAK,QAAQ;cACX,OAAO,SAAS;YAAE;YACpB,KAAK,cAAc;cACjB,OAAO,eAAe;YAAE;YAC1B,KAAK,aAAa;cAChB,OAAO,cAAc;YAAE;YACzB;cACE,OAAO,YAAYyD,MAAM,CAACzD,IAAI,CAAC2D,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;YAAE;UACzE;QACF,CAAC,EAAE,CAAC;QAEJ,oBACErE,OAAA,CAACF,IAAI;UAEHwE,EAAE,EAAEH,YAAa;UACjBpB,KAAK,EAAE;YACLwB,KAAK,EAAE,MAAM;YACbC,cAAc,EAAE,MAAM;YACtBjB,OAAO,EAAE,WAAW;YACpBE,YAAY,EAAE,KAAK;YACnBgB,UAAU,EAAE;UACd,CAAE;UACFC,YAAY,EAAGrC,CAAC,IAAKA,CAAC,CAACsC,aAAa,CAAC5B,KAAK,CAACO,eAAe,GAAG,SAAU;UACvEsB,YAAY,EAAGvC,CAAC,IAAKA,CAAC,CAACsC,aAAa,CAAC5B,KAAK,CAACO,eAAe,GAAG,aAAc;UAAAI,QAAA,EAE1EQ,MAAM,CAACzD;QAAI,GAZPyD,MAAM,CAAC/B,QAAQ;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAahB,CAAC;MAEX,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,EAEApD,iBAAiB,iBAChBX,OAAA;MAAK8C,SAAS,EAAC,eAAe;MAAAY,QAAA,eAC5B1D,OAAA;QAAK8C,SAAS,EAAC,eAAe;QAAAY,QAAA,gBAC5B1D,OAAA;UAAQ8C,SAAS,EAAC,cAAc;UAACa,OAAO,EAAEA,CAAA,KAAM/C,oBAAoB,CAAC,KAAK,CAAE;UAAA8C,QAAA,EAAC;QAE7E;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT/D,OAAA;UAAM6E,QAAQ,EAAEzC,cAAe;UAAAsB,QAAA,gBAC7B1D,OAAA;YAAK8C,SAAS,EAAC,YAAY;YAAAY,QAAA,gBACzB1D,OAAA;cAAO8C,SAAS,EAAC,YAAY;cAAAY,QAAA,EAAC;YAAK;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC3C/D,OAAA;cACE8E,IAAI,EAAC,MAAM;cACXhC,SAAS,EAAC,cAAc;cACxBiC,KAAK,EAAEtE,IAAK;cACZuE,QAAQ,EAAG3C,CAAC,IAAK3B,OAAO,CAAC2B,CAAC,CAAC4C,MAAM,CAACF,KAAK,CAAE;cACzCG,QAAQ;YAAA;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACN/D,OAAA;YAAA0D,QAAA,eACE1D,OAAA;cAAQ8E,IAAI,EAAC,QAAQ;cAAChC,SAAS,EAAC,iBAAiB;cAAAY,QAAA,EAAC;YAAM;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAGV,CAAC;AAAC7D,EAAA,CAzNID,OAAO;EAAA,QASmBJ,SAAS;AAAA;AAAAsF,EAAA,GATnClF,OAAO;AA2Nb,eAAeA,OAAO;AAAC,IAAAkF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}